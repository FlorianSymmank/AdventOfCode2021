package de.floriansymmank.puzzles;

import java.util.ArrayList;
import java.util.List;

/**
 * https://adventofcode.com/2021/day/13
 */
public class TransparentOrigami {
    private final List<String> instructions;
    private final int[][] gridOfOrigami;

    public TransparentOrigami(List<String> instr) {
        this.instructions = new ArrayList<>(instr);

        int getMaxX = 0;
        int getMaxY = 0;

        for (String instruction : instructions) {
            if (instruction.contains(",")) {
                String[] split = instruction.split(",");
                int y = Integer.parseInt(split[0]);
                int x = Integer.parseInt(split[1]);

                if (x > getMaxX) {
                    getMaxX = x;
                }

                if (y > getMaxY) {
                    getMaxY = y;
                }
            }
        }

        gridOfOrigami = new int[getMaxX + 1][getMaxY + 1];

        for (String instruction : instructions) {
            if (instruction.contains(",")) {
                String[] split = instruction.split(",");
                int y = Integer.parseInt(split[0]);
                int x = Integer.parseInt(split[1]);
                gridOfOrigami[x][y] = 1;
            }
        }

        instructions.removeIf(s -> s.contains(",") || s.isBlank());
    }

    public int getVisiblePointsCount(int instructions) {
        int[][] grid = foldGrid(instructions);

        int visiblePoints = 0;
        for (int[] row : grid) {
            for (Integer cell : row) {
                if (cell == 1) {
                    visiblePoints++;
                }
            }
        }

        return visiblePoints;
    }

    private int[][] foldGrid(int times) {

        int[][] grid = gridOfOrigami;

        for (int i = 0; i < times; i++) {
            String instruction = this.instructions.get(i);
            if (instruction.contains("y")) {
                int pos = Integer.parseInt(instruction.substring(instruction.indexOf("y=") + 2));
                int[][] newGrid = new int[pos][grid[0].length];

                for (int row = 0; row < grid.length; row++)
                    for (int col = 0; col < grid[0].length; col++)
                        if (grid[row][col] == 1)
                            if (row < pos)
                                newGrid[row][col] = grid[row][col];
                            else if (row > pos)
                                newGrid[pos - (row - pos)][col] = grid[row][col];

                grid = newGrid;

            } else if (instruction.contains("x")) {
                int pos = Integer.parseInt(instruction.substring(instruction.indexOf("x=") + 2));
                int[][] newGrid = new int[grid.length][pos];

                for (int row = 0; row < grid.length; row++)
                    for (int col = 0; col < grid[0].length; col++)
                        if (grid[row][col] == 1)
                            if (col < pos)
                                newGrid[row][col] = grid[row][col];
                            else if (col > pos)
                                newGrid[row][pos - (col - pos)] = grid[row][col];

                grid = newGrid;
            }
        }

        return grid;
    }

    private int[][] foldGrid() {
        return foldGrid(instructions.size());
    }

    public String getCode() {
        int[][] grid = foldGrid();
        printGrid(grid);
        return "";
    }

    @Override
    public String toString() {
        // code generated by calling getCode() and just reading the output grid, not interested to convert it to a string
        return "Day 13 (Transparent Origami): getVisiblePointsCount(1) = " + getVisiblePointsCount(1) + " //// getCode() = FGKCKBZG";
    }

    private void printGrid(int[][] grid) {
        for (int[] row : grid) {
            for (Integer cell : row) {
                if (cell == 1) {
                    System.out.print("#");
                } else
                    System.out.print(".");
            }
            System.out.println();
        }
        System.out.println();
    }
}
